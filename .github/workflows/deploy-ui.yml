name: Deploy UI (OIDC)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-west-3

      - name: Resolve UI environment
        id: env
        shell: bash
        run: |
          set -euo pipefail
          # pour l'instant: prod uniquement
          echo "name=Rcvo-UI-prod" >> "$GITHUB_OUTPUT"

      # Build front si besoin (Node). Sinon on zipe tout.
      - name: Build & archive UI
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bundle
          # Exemple si tu as un build:
          # npm ci
          # npm run build
          # zip -r bundle/ui.zip build .platform
          # Par défaut: on zipe tout le repo (sans .git)
          rm -f bundle/ui.zip
          zip -qr bundle/ui.zip . -x ".git/*"

      - name: Create EB application version
        id: publish
        shell: bash
        run: |
          set -euo pipefail
          APP="Rcvo-UI"
          LABEL="ui-${{ github.run_id }}-${{ github.run_attempt }}"
          ACC=$(aws sts get-caller-identity --query Account --output text)
          BUCKET="elasticbeanstalk-eu-west-3-$ACC"
          KEY="rcvo-ui/${LABEL}.zip"

          aws s3 cp bundle/ui.zip "s3://$BUCKET/$KEY" >/dev/null

          if ! aws elasticbeanstalk describe-application-versions \
                --application-name "$APP" \
                --version-labels "$LABEL" \
                --query 'ApplicationVersions[0].VersionLabel' \
                --output text | grep -q "$LABEL"; then
            aws elasticbeanstalk create-application-version \
              --application-name "$APP" \
              --version-label "$LABEL" \
              --source-bundle S3Bucket="$BUCKET",S3Key="$KEY" >/dev/null
          fi

          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Update EB environment
        shell: bash
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.env.outputs.name }}" \
            --version-label   "${{ steps.publish.outputs.label }}" >/dev/null
          echo "Déploiement -> ${{ steps.env.outputs.name }} / ${{ steps.publish.outputs.label }}"

      - name: Wait for Ready/Green
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..90}; do
            read S H <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names '${{ steps.env.outputs.name }}' \
              --query 'Environments[0].[Status,Health]' --output text)"
            echo "  $i: $S / $H"
            if [ "$S" = "Ready" ] && [ "$H" = "Green" ]; then exit 0; fi
            sleep 10
          done
          echo "Timeout attente EB"; exit 1

      - name: Smoke test /health
        shell: bash
        run: |
          set -euo pipefail
          URL="http://$(aws elasticbeanstalk describe-environments \
            --environment-names '${{ steps.env.outputs.name }}' \
            --query 'Environments[0].CNAME' --output text)"
          code=$(curl -sS -o /dev/null -w '%{http_code}' "$URL/health")
          echo "GET $URL/health -> $code"
          [ "$code" = "200" ]
