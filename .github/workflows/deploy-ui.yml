name: D√©ployer l'interface Rcvo (UI) sur Elastic Beanstalk

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environnement EB cible"
        type: choice
        required: true
        default: "prod"
        options: [prod, staging]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-UI
  ENV_PROD: Rcvo-UI-prod
  ENV_STAGING: Rcvo-UI-staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Auth AWS via OIDC
      - name: Configurer AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 2) R√©cup√©ration du code
      - name: Checkout
        uses: actions/checkout@v4

      # (Optionnel) Si tu veux builder un front (ex: React/Vite) avant empaquetage,
      # d√©commente le bloc ci-dessous :
      #
      # - name: Build UI si package.json pr√©sent
      #   run: |
      #     set -e
      #     if [ -f package.json ]; then
      #       echo "üß± Build front‚Ä¶"
      #       corepack enable || true
      #       if command -v pnpm >/dev/null 2>&1; then
      #         pnpm install --frozen-lockfile || pnpm install
      #         pnpm build || true
      #       else
      #         npm ci || npm install
      #         npm run build || true
      #       fi
      #     else
      #       echo "‚ÑπÔ∏è Aucun package.json √† la racine ‚Äì skip build."
      #     fi

      # 3) Pr√©parer le ZIP attendu par EB
      - name: Pr√©parer le bundle ui.zip
        run: |
          set -euo pipefail
          echo "üß© Cr√©ation bundle/ui.zip‚Ä¶"
          mkdir -p bundle
          # On zippe tout le repo en excluant ce qui ne doit pas partir
          zip -qr bundle/ui.zip . \
            -x ".git/*" \
            -x ".github/*" \
            -x "node_modules/*" \
            -x "**/*.log" \
            -x "bundle/*"
          test -f bundle/ui.zip && echo "‚úÖ bundle/ui.zip OK ($(du -h bundle/ui.zip | cut -f1))"

      # 4) Pousser sur S3 + cr√©er l'application version EB
      - name: Cr√©er et publier la version EB
        id: eb
        run: |
          set -euo pipefail
          ACC=$(aws sts get-caller-identity --query Account --output text)
          S3B="elasticbeanstalk-${AWS_REGION}-${ACC}"
          VERSION="deploy-${{ github.run_id }}-${{ github.run_attempt }}"
          KEY="${APP_NAME}/${VERSION}.zip"

          echo "üì§ Upload vers s3://${S3B}/${KEY}"
          aws s3 cp bundle/ui.zip "s3://${S3B}/${KEY}" --only-show-errors

          echo "üÜï create-application-version ${VERSION}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "${VERSION}" \
            --source-bundle S3Bucket="${S3B}",S3Key="${KEY}" >/dev/null

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      # 5) D√©ployer sur l'environnement choisi
      - name: D√©ployer sur Elastic Beanstalk
        run: |
          set -euo pipefail
          if [ "${{ inputs.env }}" = "prod" ]; then
            ENV_NAME="${ENV_PROD}"
          else
            ENV_NAME="${ENV_STAGING}"
          fi

          VERSION="${{ steps.eb.outputs.version }}"
          echo "üöÄ D√©ploiement ${VERSION} -> ${ENV_NAME}"

          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${VERSION}" >/dev/null

          echo "‚è≥ Attente Ready/Green‚Ä¶"
          for i in $(seq 1 60); do
            read -r STATUS HEALTH VER URL <<EOF
          $(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Status,Health,VersionLabel,EndpointURL]' \
              --output text)
          EOF
            echo "  - Status=$STATUS Health=$HEALTH Version=$VER"
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "‚úÖ Environnement pr√™t : $URL"
              exit 0
            fi
            sleep 10
          done
          echo "‚ö†Ô∏è Timeout d'attente Ready/Green, v√©rifie la console EB."
          exit 1
