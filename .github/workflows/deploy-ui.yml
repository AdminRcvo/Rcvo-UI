name: RCVO UI Deploy (EB via OIDC)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy-ui:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      EB_APP: Rcvo-UI
      EB_ENV: Rcvo-UI-prod
      S3_BUCKET: rcvo-eb-artifacts
      AWS_REGION_FALLBACK: eu-west-3

    steps:
      - uses: actions/checkout@v4

      # Résout le rôle OIDC quel que soit le nom du secret
      - name: Resolve OIDC role
        env:
          A: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          B: ${{ secrets.AWS_ROLE_PROD }}
          C: ${{ secrets.ASSISTANT_ROLE_ARN }}
        run: |
          ROLE="${A:-${B:-${C:-}}}"
          if [ -z "$ROLE" ]; then
            echo "❌ Ajoute un secret: AWS_ROLE_TO_ASSUME ou AWS_ROLE_PROD ou ASSISTANT_ROLE_ARN"
            exit 1
          fi
          echo "ROLE_TO_ASSUME=$ROLE" >> $GITHUB_ENV

      - name: Resolve region
        env:
          R: ${{ secrets.AWS_REGION }}
        run: |
          echo "REGION=${R:-$AWS_REGION_FALLBACK}" >> $GITHUB_ENV

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.REGION }}

      # Archive unique (évite les doublons au re-run)
      - name: Zip UI
        run: |
          APP="rcvo-ui-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${GITHUB_SHA::7}"
          echo "APP=${APP}" >> $GITHUB_ENV
          zip -r "${APP}.zip" .

      # Upload & create app version (idempotent)
      - name: Upload & Create EB version (idempotent)
        run: |
          aws s3 cp "${APP}.zip" "s3://${{ env.S3_BUCKET }}/ui/${APP}.zip"

          EXISTS=$(aws elasticbeanstalk describe-application-versions \
            --application-name "${{ env.EB_APP }}" \
            --query "length(ApplicationVersions[?VersionLabel=='${APP}'])" \
            --output text)

          if [ "$EXISTS" -eq 0 ]; then
            aws elasticbeanstalk create-application-version \
              --region "${{ env.REGION }}" \
              --application-name "${{ env.EB_APP }}" \
              --version-label "${APP}" \
              --source-bundle S3Bucket="${{ env.S3_BUCKET }}",S3Key="ui/${APP}.zip"
          else
            echo "⏭️ Version '${APP}' existe déjà — skip."
          fi

      # Un SEUL update-environment (pas de 2e update qui casse l'état Ready)
      - name: Update EB environment (deploy)
        run: |
          aws elasticbeanstalk update-environment \
            --region "${{ env.REGION }}" \
            --environment-name "${{ env.EB_ENV }}" \
            --version-label "${APP}"

      # Attendre l'état Ready avant toute autre action
      - name: Wait until environment is Ready
        run: |
          aws elasticbeanstalk wait environment-updated \
            --region "${{ env.REGION }}" \
            --environment-names "${{ env.EB_ENV }}"
          echo "✅ Environment Ready"

      # Vérif rapide
      - name: Quick checks
        run: |
          UI_LB=$(aws elasticbeanstalk describe-environments \
            --region "${{ env.REGION }}" \
            --environment-names "${{ env.EB_ENV }}" \
            --query 'Environments[0].EndpointURL' --output text)
          echo "UI LB: $UI_LB"
          curl -sI "http://${UI_LB}/" | head -n1 || true
