name: Déployer l'interface Rcvo (UI) sur Elastic Beanstalk

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
  EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configurer AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Préparer le bundle ui.zip
        run: |
          set -euo pipefail
          rm -f ui.zip
          # On zippe tout le repo sauf .git
          zip -qr ui.zip . -x ".git/*"

      - name: Créer et publier la version EB
        id: create_version
        run: |
          set -euo pipefail
          TS=$(date +%Y%m%d-%H%M%S)
          LABEL="ui-${TS}"
          S3B="elasticbeanstalk-${AWS_REGION}-$(aws sts get-caller-identity --query Account --output text)"
          S3K="${EB_APP_NAME}/${LABEL}.zip"

          aws s3 cp ui.zip "s3://${S3B}/${S3K}"

          # CreateApplicationVersion (idempotent : on ignore "already exists")
          set +e
          out=$(aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP_NAME}" \
            --version-label "${LABEL}" \
            --source-bundle S3Bucket="${S3B}",S3Key="${S3K}" 2>&1)
          rc=$?
          set -e
          if [ $rc -ne 0 ] && ! echo "$out" | grep -qi 'already exists'; then
            echo "$out"; exit $rc
          fi

          echo "label=${LABEL}" >> $GITHUB_OUTPUT

      - name: Déployer sur Elastic Beanstalk
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "${{ steps.create_version.outputs.label }}"
