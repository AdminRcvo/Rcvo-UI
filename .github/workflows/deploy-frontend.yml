name: Deploy Frontend (OIDC)

on:
  push:
    branches: [ main, staging ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      dryrun:
        description: "Prévisualiser (ne rien écrire) ?"
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

env:
  REGION: eu-west-3
  BUCKET_STAGING: rcvo-transition
  BUCKET_PROD:    rcvo-officiel
  KEY_PREFIX: ui/   # <- on déploie sous ce sous-dossier, rien d'autre n'est touché

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ROLE_STAGING: arn:aws:iam::409818814260:role/RcvoDeployStagingRole
      ROLE_PROD:    arn:aws:iam::409818814260:role/RcvoDeployProdRole

    steps:
      - uses: actions/checkout@v4

      - name: Choisir rôle / bucket selon la ref
        id: pick
        run: |
          REF="${GITHUB_REF}"
          if [[ "$REF" == refs/heads/main || "$REF" == refs/tags/v* ]]; then
            echo "ROLE=${ROLE_PROD}"         >> "$GITHUB_OUTPUT"
            echo "BUCKET=${BUCKET_PROD}"     >> "$GITHUB_OUTPUT"
          else
            echo "ROLE=${ROLE_STAGING}"      >> "$GITHUB_OUTPUT"
            echo "BUCKET=${BUCKET_STAGING}"  >> "$GITHUB_OUTPUT"
          fi

      - name: Configurer AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ steps.pick.outputs.ROLE }}

      # Install si lockfile présent (sinon saute)
      - name: Installer deps (si lockfile)
        run: if [ -f package-lock.json ]; then npm ci; fi

      # Build si script présent (sinon saute)
      - name: Build (si script présent)
        run: |
          if jq -e '.scripts.build' package.json >/dev/null 2>&1; then
            npm run build
          else
            echo "Pas de script build -> on publiera tel quel"
          fi

      - name: Localiser le dossier à publier
        id: dist
        run: |
          if [ -d dist ]; then D=dist;
          elif [ -d build ]; then D=build;
          else D=.; fi
          echo "dir=$D" >> "$GITHUB_OUTPUT"
          echo "Publier: $D"

      - name: Prévisualisation (DRY-RUN)
        if: ${{ inputs.dryrun }}
        run: |
          echo "DRY-RUN -> n'écrit rien"
          aws s3 sync "${{ steps.dist.outputs.dir }}/" "s3://${{ steps.pick.outputs.BUCKET }}/${{ env.KEY_PREFIX }}" \
            --only-show-errors --exact-timestamps --dryrun

      - name: Sync vers S3 (écriture réelle)
        if: ${{ !inputs.dryrun }}
        run: |
          aws s3 sync "${{ steps.dist.outputs.dir }}/" "s3://${{ steps.pick.outputs.BUCKET }}/${{ env.KEY_PREFIX }}" \
            --only-show-errors --exact-timestamps
          echo "Contenu déployé vers s3://${{ steps.pick.outputs.BUCKET }}/${{ env.KEY_PREFIX }}"

      # (Optionnel) Invalidation CloudFront – désactivé tant qu'on ne connaît pas l'ID
      # - name: Invalidation CloudFront
      #   run: aws cloudfront create-invalidation --distribution-id DXXXXXXXX --paths "/*"

      - name: Smoke test (statique)
        if: ${{ !inputs.dryrun }}
        run: |
          aws s3 ls "s3://${{ steps.pick.outputs.BUCKET }}/${{ env.KEY_PREFIX }}" | head -n 20
