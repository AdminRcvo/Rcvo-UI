name: Cost Optimization (manual only)

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Chemin du module Terraform (ex: backend/terraform/modules/cost-optimizer)'
        required: false
        default: 'backend/terraform/modules/cost-optimizer'
      private_subnet_id:
        description: "ID du subnet privé (laisser vide si non requis)"
        required: false
        default: ''
      apply:
        description: "Mettre à 'true' pour exécuter terraform apply (danger: modifie infra)"
        required: false
        default: 'false'

jobs:
  cost-optimize:
    name: Cost Optimization
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug - show repo root and tf_dir
        run: |
          echo "Runner workdir: $(pwd)"
          echo "Listing repo root:"
          ls -la
          echo "tf_dir='${{ inputs.tf_dir }}'"
          if [ -d "${{ inputs.tf_dir }}" ]; then
            echo "Contents of tf_dir:"
            ls -la "${{ inputs.tf_dir }}"
          else
            echo "tf_dir directory not found: ${{ inputs.tf_dir }}"
          fi

      - name: Verify tf module exists
        id: verify
        run: |
          if [ ! -d "${{ inputs.tf_dir }}" ]; then
            echo "Module introuvable: ${{ inputs.tf_dir }}"
            exit 1
          fi
          echo "found=true"
          echo "::set-output name=found::true"

      - name: Fail early if module requires private_subnet_id but none provided
        if: steps.verify.outputs.found == 'true'
        run: |
          TFV="${{ inputs.tf_dir }}/variables.tf"
          if [ -f "$TFV" ] && grep -q 'variable "private_subnet_id"' "$TFV"; then
            if [ -z "${{ inputs.private_subnet_id }}" ]; then
              echo "Erreur : le module nécessite la variable 'private_subnet_id'. Renseignez-la pour exécuter le plan."
              exit 1
            fi
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init & Plan
        working-directory: ${{ inputs.tf_dir }}
        run: |
          # set variable args only if provided
          VARS=""
          if [ -n "${{ inputs.private_subnet_id }}" ]; then
            VARS="-var=private_subnet_id=${{ inputs.private_subnet_id }}"
          fi
          terraform init -input=false
          terraform plan -input=false -out=tfplan $VARS
        env:
          TF_IN_AUTOMATION: "1"

      - name: Upload plan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ inputs.tf_dir }}/tfplan

      - name: Terraform Apply (only if requested)
        if: ${{ inputs.apply == 'true' }}
        working-directory: ${{ inputs.tf_dir }}
        run: |
          terraform apply -input=false -auto-approve tfplan
        env:
          TF_IN_AUTOMATION: "1"

      - name: Notify / Summary
        run: |
          echo "Cost optimization workflow terminé. apply=${{ inputs.apply }}"

